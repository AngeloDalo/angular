//INSTALLAZIONE
npm install -g @angular/cli
ng new primo-progetto
y y CSS
ng serve
http://localhost:4200/
pulire app.component.html
----------------------------------------------------------------
//STRUTTURA
nodu_modules: gestore dei pacchetti che abbiamo installato (npm)
.browserlistrc: brower supportato
.editorconfig: regole per l'editor
.gitignore: file che vogliamo salvare o ignorare
angular.json: impostanzioni angular
karma.config.js: serve per i test
package.json: contiene dettagli sul progetto 
README.md: guida per l'utilizzo di angular
tsconfig.app.json: configurazione di ts
tsconfig.json: struttura dati che serve al compilatore
tsconfig.spec.json: file legati al testing
src:
	-app: app.module.ts: lista di componenti, moduli e services
	      app-routing.module.ts: cambia url in alto
	-assets: file che vogliamo utilizzare come img
	-enviroment: ambiante di svilippo, andremo a mettere delle variabili
	-main.ts: da dove parte app angular, file iniziale
----------------------------------------------------------------
//COMPONENTI
ng g c prova 
inserire <app-prova></app-prova> in app.component.html
----------------------------------------------------------------
//ANGULAR MATERIAL DESIGN
alternativa a bootstrap
ng add @angular/material
y Indigo-pink y   include ad enable anaimations
in app.module.ts 
//ESEMPIO SLIDER
//api
import { MatSliderModule } from '@angular/material/slider';
in imports aggiungere MatSliderModule
//examples
andare in un componente <mat-slider min="1" max="100" step="1" value="50"></mat-slider>, aggiungere css
avviare di nuovo server
----------------------------------------------------------------
//TUTTI TIèI DI INTERFACCIA
export class ProvaComponent implements OnInit, AfterContentChecked, AfterContentInit, AfterViewChecked, AfterViewInit, DoCheck, OnDestroy {
NgDoCheck: se abbiamo delle regole non check le andrà a rispettare
ngAfterContentInit: dopo che contenuto viene inizializzato
ngAfterViewChecked: dopo che contenuto è stato controllato
----------------------------------------------------------------
//DATA BINDING
//STRING INTERPOLATION
inserire variabili in componente.component.ts -> nomecane = "roger"
inserirlo in componente.component.html -> <h1>{{nomecane}}</h1>
-->esempio app.component.html/ts<--
//PROPERTY BINDING
modificare classi e stili in base ai dati che arrivano dal ts
isDisabled = true
<button mat-raised-button color="primary" [disabled]="isDisabled">Primary</button>
-->esempio immagine, prova.component.ts/html<--
//EVENT BINDING
leghiamo eventi che avvengolo nel html e li inviamo al ts
-->app.component.ts e app.component.html<--
//TWO WAY BINDING
-->app.component.html/ts<--
cambiare una variabile in tempo reale con ad esempio un form
eventi html cambiano ts
<input matInput placeholder="Ex. Pizze" [(ngModel)]="title" />, già di default ha valore title
----------------------------------------------------------------
//DIRETTIVE
cambiare comportamento elemento
-built-in (ngClass, ngStyle, ngModel)
-attribute (comportamento o apperenza di elemento)
-structural (*ngIf, *ngFor)
//*NGIF
<p *ngIf="6>5">sono un paragrafo</p>
-->esempio app.component.html/tes<--
//*NGFOR
<li *ngFor="let persona of persone; index as i">
-->app.component.html/ts<--
//*NGSWITCH
numero = 3;
<div [ngSwitch]="numero">
  <p *ngSwitchCase="1">uno</p>
  <p *ngSwitchCase="'stringa'">4</p>
  <p *ngSwitchDefault>default</p>
</div>
-->app.component.html/ts<--
//*NGSTYLE -> modifico css
color = 'green';
<ul>
  <li *ngFor="let persona of persone">
    <div class="cerchio" [ngStyle]="{'background': persona.isOnline ? color : 'red'}"></div>
    <p>{{persona.nome}} - {{persona.cognome}}</p>
  </li>
</ul>
-->app.component.html/ts<--
//*NGCLASS -> aggiungo classi
<ul>
  <li *ngFor="let persona of persone; index as i">
    <div class="cerchio" [ngClass]="{'cerchio-online prova': persona.isOnline, 'cerchio-offline': !persona.isOnline}">i</div>
    <div class="cerchio" [ngClass]="persona.isOnline ? 'cerchio-online' : 'cerchio-offline'">i</div>
    <p>{{persona.nome}} - {{persona.cognome}}</p>
  </li>
</ul>
-->app.component.html/ts<--
----------------------------------------------------------------
//PARENTE TO CHILD
nel componente prova.component.ts inserisco @Input() data: any; //dato nome variabile
in app.componet.html inserisco <app-prova [data]="persone"></app-prova> //persone presente in ts
in prova.component.html posso utilizzare persone (data)
<div *ngFor="let persona of data;">
  <p>{{persona.nome}} - {{persona.cognome}}</p>
</div>
//modifica con bottone in app.component.html/ts e uso di OnChanges in prova.component.ts
//CHILD TO PARENT
inserisco variabile in figlio prova.component.html
creo evento output in prova.component.ts @Output() mandaDatiEvento = new EventEmitter<string>()
creo bottone con funzione in prova.component.html <button (click)="mandaDati()">Manda dati al parente</button>
creo funzione in prova.component.ts
mandaDati() {
    this.mandaDatiEvento.emit(this.nome)
}
il componente padre deve essere in attasa dell'evento e vado in app.component.html
<app-prova (mandaDatiEvento)="onRiceviDati($event)"></app-prova>
in app.component.ts creo la funzione onRiceviDati()
onRiceviDati(value: string) {
    console.log(value)
}
----------------------------------------------------------------
//VARIABILI TEMPLATE
passare parametro da html a ts
//html
<input #inputSaluti value="ciao">
//ts
@ViewChild('inputSaluti') valoreInput!: ElementRef<HTMLInputElement>
ngAfterViewInit(): void {
    console.log(this.valoreInput.nativeElement.value)
}
----------------------------------------------------------------
//CREARE DIRETTIVE
ng g d highlight
creimo direttiva in hightlight.directive.ts modificando il costruttore
constructor(private element: ElementRef) {
    this.element.nativeElement.style.backgroundColor = 'yellow'
}
ora dobbiamo applicare la nostra direttiva in app.component.html
<p appHighlight>ciao sono un paragrafo</p>
//vedere altri esempi
//PASSARE DATI ALLA DIRETTIVA
vado in app.component.html
<p [appHighlight]="colore">ciao sono un paragrafo</p>
vado in app.component.ts
colore = "purple"
vado in highlight.directive.ts
@Input() appHighlight = ''
//AGGIUNGERE VALORE DI DEFAULT 
vado in highlights.directive.ts 
@Input() defaultColor = ''
vado in app.component.ts
colore = ''
vado in app.component.html
<p [appHighlight]="colore" defaultColor="blue">ciao sono un paragrafo</p>
----------------------------------------------------------------
//FUNZIONI PIPE
<p>ciao benvenuti al {{titolo | uppercase}}</p>
-->oggi = date.Now()
<p>{{oggi | date}}</p>
<p>{{oggi | date:'medium'}}</p> //data con ora
<p>{{oggi | date:'shortTime'}}</p> //solo ora
<p>{{oggi | date:'mm:ss'}}</p>
-->number = 5
<p>{{number | number: '2.1-4'}}</p> //numero prima e dopo virgola
<p>{{number | percent: '2.1-4'}}</p>
<p>{{number | currency}}</p>
<p>{{number | currency:'EUR'}}</p>
----------------------------------------------------------------
//SERVICE
permettono qualsiasi tipo di comunicazione
ng g s servizio-prova
inserisco variabile che voglio utilizzare ovunque in servizio.service.ts
definisco il servizio nel costructor del componente
constructor(private servizioProva: ServizioProvaService) {}
vedo variabile nel ngOnInit del componente
ngOnInit(): void {
    console.log(this.servizioProva.persone)
}
----------------------------------------------------------------
//ROUTING
creo componenti di prova per provare routing
definisco <router-outlet></router-outlet> in app.component.ts
gestisco il routing in app-routing.module.ts
const routes: Routes = [
  {path: '', component: HomeComponent },
  {path: 'about', component: AboutComponent },
  {path: 'contact', component: ContactComponent },
];
//ROUTING CON PARAMETRI
vado in app-routing.module.ts per aggiungere percorso aggiuntivo
{path: 'contact/:id', component: ContactComponent },
nel costruttore del componente devo importare la route
private route: ActivatedRoute
creo variabile per vedere se sono in una route composta contact/:id
isProfile: boolean = false;
in ngOnInit cambio valore in true se sono in route composta
ngOnInit(): void {
    // this.persone=this.servizioProva.getPersone()
    // this.isProfile = !this.route.snapshot.paramMap.get('id') ? false : true
    if(this.route.snapshot.paramMap.get('id')){
      this.isProfile = true
      this.persone = this.servizioProva.gerPersona(parseInt(this.route.snapshot.paramMap.get('id')!))
    } else {
      this.isProfile = false
      this.persone=this.servizioProva.getPersone()
    }
    console.log(this.isProfile)
  }
creo nel contact.component.html la situazioni in cui voglio tutti i contatti oppure il singolo contatto con in ng-tamplate if else
//ROUTING CHILDREN PER CARICARE SOTOCOMPONENTI
non esco dalla pagina ma faccio uscire risultati in una banda laterale
creo un componente contatto
in app-routing.module.ts togliamo {path: 'contact/:id', component: ContactComponent }, perchè se vogliamo avere tutto su una stessa pagina dobbiamo aggiungere una proprietà chimata children
{path: 'contact', component: ContactComponent, children: [
  {path: ':id', component: ContattoComponent}
]},
creo collegamento da contact a contatto 
<router-outlet></router-outlet>
modifico ngOnInit di contact e contatto facendo in modo che si aggiorni ogni volta che cambiamo link inserendo varibaile id
----------------------------------------------------------------
//REDIRECT AND ERROR
creo componente per per l'errore
cro una rotta per l'errore in app-routing.module.ts
{path: '404', component: NotfoundComponent}
//PROTEGGERE ROTTE CON GUARD
creiamo servizio nella cartella auth ng g s auth/auth
creiamo la guard in auth ng g guard auth/auth
importiamo il service auth nel guard auth
ritorniamo in canActivate la funzione isAuthenticate() di auth.service.ts collegato alla variabile isLoggedIn di auth.service.ts
aggiungiamo il canActivate nella rotta che vogliamo proteggere in app-routing.module.ts
possiamo accedere alla rotta solamente se isLoggedIn è true
//VEDERE CHILD SOLAMENTE CON RUOLO AGGIUNTIVO
aggiungiamo il CanActivateChild in auth.guard.ts
aggingiamo una funzione isAdmin in auth.service.ts
aggiungiamo canActivateChild in app-routing.module.ts






















