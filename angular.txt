//INSTALLAZIONE
npm install -g @angular/cli
ng new primo-progetto
y y CSS
ng serve
http://localhost:4200/
pulire app.component.html
----------------------------------------------------------------
//STRUTTURA
nodu_modules: gestore dei pacchetti che abbiamo installato (npm)
.browserlistrc: brower supportato
.editorconfig: regole per l'editor
.gitignore: file che vogliamo salvare o ignorare
angular.json: impostanzioni angular
karma.config.js: serve per i test
package.json: contiene dettagli sul progetto 
README.md: guida per l'utilizzo di angular
tsconfig.app.json: configurazione di ts
tsconfig.json: struttura dati che serve al compilatore
tsconfig.spec.json: file legati al testing
src:
	-app: app.module.ts: lista di componenti, moduli e services
	      app-routing.module.ts: cambia url in alto
	-assets: file che vogliamo utilizzare come img
	-enviroment: ambiante di svilippo, andremo a mettere delle variabili
	-main.ts: da dove parte app angular, file iniziale
----------------------------------------------------------------
//COMPONENTI
ng g c prova 
inserire <app-prova></app-prova> in app.component.html
----------------------------------------------------------------
//ANGULAR MATERIAL DESIGN
alternativa a bootstrap
ng add @angular/material
y Indigo-pink y   include ad enable anaimations
in app.module.ts 
//ESEMPIO SLIDER
//api
import { MatSliderModule } from '@angular/material/slider';
in imports aggiungere MatSliderModule
//examples
andare in un componente <mat-slider min="1" max="100" step="1" value="50"></mat-slider>, aggiungere css
avviare di nuovo server
----------------------------------------------------------------
//TUTTI TIèI DI INTERFACCIA
export class ProvaComponent implements OnInit, AfterContentChecked, AfterContentInit, AfterViewChecked, AfterViewInit, DoCheck, OnDestroy {
NgDoCheck: se abbiamo delle regole non check le andrà a rispettare
ngAfterContentInit: dopo che contenuto viene inizializzato
ngAfterViewChecked: dopo che contenuto è stato controllato
----------------------------------------------------------------
//DATA BINDING
//STRING INTERPOLATION
inserire variabili in componente.component.ts -> nomecane = "roger"
inserirlo in componente.component.html -> <h1>{{nomecane}}</h1>
-->esempio app.component.html/ts<--
//PROPERTY BINDING
modificare classi e stili in base ai dati che arrivano dal ts
isDisabled = true
<button mat-raised-button color="primary" [disabled]="isDisabled">Primary</button>
-->esempio immagine, prova.component.ts/html<--
//EVENT BINDING
leghiamo eventi che avvengolo nel html e li inviamo al ts
-->app.component.ts e app.component.html<--
//TWO WAY BINDING
-->app.component.html/ts<--
cambiare una variabile in tempo reale con ad esempio un form
eventi html cambiano ts
<input matInput placeholder="Ex. Pizze" [(ngModel)]="title" />, già di default ha valore title
----------------------------------------------------------------
//DIRETTIVE
cambiare comportamento elemento
-built-in (ngClass, ngStyle, ngModel)
-attribute (comportamento o apperenza di elemento)
-structural (*ngIf, *ngFor)
//*NGIF
<p *ngIf="6>5">sono un paragrafo</p>
-->esempio app.component.html/tes<--
//*NGFOR
<li *ngFor="let persona of persone; index as i">
-->app.component.html/ts<--
//*NGSWITCH
numero = 3;
<div [ngSwitch]="numero">
  <p *ngSwitchCase="1">uno</p>
  <p *ngSwitchCase="'stringa'">4</p>
  <p *ngSwitchDefault>default</p>
</div>
-->app.component.html/ts<--
//*NGSTYLE -> modifico css
color = 'green';
<ul>
  <li *ngFor="let persona of persone">
    <div class="cerchio" [ngStyle]="{'background': persona.isOnline ? color : 'red'}"></div>
    <p>{{persona.nome}} - {{persona.cognome}}</p>
  </li>
</ul>
-->app.component.html/ts<--
//*NGCLASS -> aggiungo classi
<ul>
  <li *ngFor="let persona of persone; index as i">
    <div class="cerchio" [ngClass]="{'cerchio-online prova': persona.isOnline, 'cerchio-offline': !persona.isOnline}">i</div>
    <div class="cerchio" [ngClass]="persona.isOnline ? 'cerchio-online' : 'cerchio-offline'">i</div>
    <p>{{persona.nome}} - {{persona.cognome}}</p>
  </li>
</ul>
-->app.component.html/ts<--
----------------------------------------------------------------
//PARENTE TO CHILD
nel componente prova.component.ts inserisco @Input() data: any; //dato nome variabile
in app.componet.html inserisco <app-prova [data]="persone"></app-prova> //persone presente in ts
in prova.component.html posso utilizzare persone (data)
<div *ngFor="let persona of data;">
  <p>{{persona.nome}} - {{persona.cognome}}</p>
</div>
//modifica con bottone in app.component.html/ts e uso di OnChanges in prova.component.ts
//CHILD TO PARENT
inserisco variabile in figlio prova.component.html
creo evento output in prova.component.ts @Output() mandaDatiEvento = new EventEmitter<string>()
creo bottone con funzione in prova.component.html <button (click)="mandaDati()">Manda dati al parente</button>
creo funzione in prova.component.ts
mandaDati() {
    this.mandaDatiEvento.emit(this.nome)
}
il componente padre deve essere in attasa dell'evento e vado in app.component.html
<app-prova (mandaDatiEvento)="onRiceviDati($event)"></app-prova>
in app.component.ts creo la funzione onRiceviDati()
onRiceviDati(value: string) {
    console.log(value)
}










