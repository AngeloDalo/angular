//INSTALLAZIONE
npm install -g @angular/cli
ng new primo-progetto
y y CSS
ng serve
http://localhost:4200/
pulire app.component.html

//STRUTTURA
nodu_modules: gestore dei pacchetti che abbiamo installato (npm)
.browserlistrc: brower supportato
.editorconfig: regole per l'editor
.gitignore: file che vogliamo salvare o ignorare
angular.json: impostanzioni angular
karma.config.js: serve per i test
package.json: contiene dettagli sul progetto 
README.md: guida per l'utilizzo di angular
tsconfig.app.json: configurazione di ts
tsconfig.json: struttura dati che serve al compilatore
tsconfig.spec.json: file legati al testing
src:
	-app: app.module.ts: lista di componenti, moduli e services
	      app-routing.module.ts: cambia url in alto
	-assets: file che vogliamo utilizzare come img
	-enviroment: ambiante di svilippo, andremo a mettere delle variabili
	-main.ts: da dove parte app angular, file iniziale

//COMPONENTI
ng g c prova 
inserire <app-prova></app-prova> in app.component.html

//ANGULAR MATERIAL DESIGN
alternativa a bootstrap
ng add @angular/material
y Indigo-pink y   include ad enable anaimations
in app.module.ts 
//ESEMPIO SLIDER
//api
import { MatSliderModule } from '@angular/material/slider';
in imports aggiungere MatSliderModule
//examples
andare in un componente <mat-slider min="1" max="100" step="1" value="50"></mat-slider>, aggiungere css
avviare di nuovo server

//TUTTI TIèI DI INTERFACCIA
export class ProvaComponent implements OnInit, AfterContentChecked, AfterContentInit, AfterViewChecked, AfterViewInit, DoCheck, OnDestroy {
-----------------------------------------------------
NgDoCheck: se abbiamo delle regole non check le andrà a rispettare
ngAfterContentInit: dopo che contenuto viene inizializzato
ngAfterViewChecked: dopo che contenuto è stato controllato

//DATA BINDING
//STRING INTERPOLATION
inserire variabili in componente.component.ts -> nomecane = "roger"
inserirlo in componente.component.html -> <h1>{{nomecane}}</h1>
//PROPERTY BINDING
modificare classi e stili in base ai dati che arrivano dal ts
//EVENT BINDING
leghiamo eventi che avvengolo nel html e li inviamo al ts
//TWO WAY BINDING
cambiare una variabile in tempo reale con ad esempio un form











